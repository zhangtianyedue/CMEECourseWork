print(r2_values)
library(lme4)
# 构建优化后的模型，包含低相关性的交互项
# 构建包含 TreeID 和 Year 作为随机效应的模型
model_with_treeid <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Soil_Temp_2in...Deg.C...Smp. +
Soil_Temp_4in...Deg.C...Smp. + Air_Temp..Deg.C...Smp. * Soil_Temp_2in...Deg.C...Smp. +
(1 | Year) + (1 | TreeID),
data = final_use_data,
family = binomial
)
# 输出模型摘要
summary(model_with_treeid)
# 输出模型摘要
summary(model_optimized_v2)
# 加载 MuMIn 包
library(MuMIn)
# 计算边际 R² 和条件 R²
r2_values <- r.squaredGLMM(model_optimized_v2)
# 输出 R² 结果
print(r2_values)
library(lme4)
# 构建优化后的模型，包含低相关性的交互项
# 构建包含 TreeID 和 Year 作为随机效应的模型
final_use_data$Air_Temp_Squared <- final_use_data$Air_Temp..Deg.C...Smp.^2
model <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Air_Temp_Squared + Soil_Temp_2in...Deg.C...Smp. +
Soil_Temp_4in...Deg.C...Smp. + (1 | Year) + (1 | TreeID),
data = final_use_data,
family = binomial
)
# 输出模型摘要
summary(model_with_treeid)
# 输出模型摘要
summary(model_optimized_v2)
# 加载 MuMIn 包
library(MuMIn)
# 计算边际 R² 和条件 R²
r2_values <- r.squaredGLMM(model_optimized_v2)
# 输出 R² 结果
print(r2_values)
library(lme4)
# 构建优化后的模型，包含低相关性的交互项
# 构建包含 TreeID 和 Year 作为随机效应的模型
model <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Soil_Temp_2in...Deg.C...Smp. +
(1 + Air_Temp..Deg.C...Smp. | Year) +
(1 + Soil_Temp_2in...Deg.C...Smp. | TreeID),
data = final_use_data,
family = binomial
)
# 输出模型摘要
summary(model_with_treeid)
# 输出模型摘要
summary(model_optimized_v2)
# 加载 MuMIn 包
library(MuMIn)
# 计算边际 R² 和条件 R²
r2_values <- r.squaredGLMM(model_optimized_v2)
# 输出 R² 结果
print(r2_values)
# 构建包含 TreeID 和 Year 作为随机效应的模型
library(lme4)
# 构建优化后的模型，包含低相关性的交互项
model_optimized_v2 <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Soil_Temp_2in...Deg.C...Smp. + Soil_Temp_4in...Deg.C...Smp. +
Air_Temp..Deg.C...Smp. * Soil_Temp_2in...Deg.C...Smp. +
(1 | Year),
data = final_use_data,
family = binomial
)
# 输出模型摘要
summary(model_optimized_v2)
# 输出模型摘要
summary(model_with_treeid)
# 输出模型摘要
summary(model_optimized_v2)
# 加载 MuMIn 包
library(MuMIn)
# 计算边际 R² 和条件 R²
r2_values <- r.squaredGLMM(model_optimized_v2)
# 输出 R² 结果
print(r2_values)
# 计算边际 R² 和条件 R²
r2_values <- r.squaredGLMM(model_optimized_v2)
# 输出 R² 结果
print(r2_values)
pred_data <- expand.grid(
Air_Temp..Deg.C...Smp. = seq(min(final_use_data$Air_Temp..Deg.C...Smp.), max(final_use_data$Air_Temp..Deg.C...Smp.), length.out = 100),
Soil_Temp_2in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_2in...Deg.C...Smp.),
Soil_Temp_4in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.),
Year = NA  # 随机效应 Year 可以设为 NA
)
# 预测分数的概率
pred_data$predicted_score <- predict(model_optimized_v2, newdata = pred_data, type = "response", re.form = NA)
# 绘制图形
ggplot(pred_data, aes(x = Air_Temp..Deg.C...Smp., y = predicted_score)) +
geom_line(color = "blue") +
labs(
x = "Air Temperature (°C)",
y = "Predicted Probability of Germination",
title = "Effect of Air Temperature on Germination Probability"
) +
theme_minimal()
# 输出 R² 结果
print(r2_values)
pred_data <- expand.grid(
Air_Temp..Deg.C...Smp. = seq(min(final_use_data$Air_Temp..Deg.C...Smp.), max(final_use_data$Air_Temp..Deg.C...Smp.), length.out = 100),
Soil_Temp_2in...Deg.C...Smp. = seq(min(final_use_data$Soil_Temp_2in...Deg.C...Smp.), max(final_use_data$Soil_Temp_2in...Deg.C...Smp.), length.out = 50),
Soil_Temp_4in...Deg.C...Smp. = c(min(final_use_data$Soil_Temp_4in...Deg.C...Smp.), mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.), max(final_use_data$Soil_Temp_4in...Deg.C...Smp.)),
Year = NA
)
# 预测发芽概率
pred_data$predicted_score <- predict(model_optimized_v2, newdata = pred_data, type = "response", re.form = NA)
# 绘制图形，使用颜色区分不同的 Soil_Temp_4in...Deg.C...Smp. 值
ggplot(pred_data, aes(x = Air_Temp..Deg.C...Smp., y = predicted_score, color = factor(Soil_Temp_4in...Deg.C...Smp.))) +
geom_line() +
facet_wrap(~ round(Soil_Temp_2in...Deg.C...Smp., 1)) +
labs(
x = "Air Temperature (°C)",
y = "Predicted Probability of Germination",
color = "Soil Temp 4in (°C)",
title = "Effect of Air and Soil Temperatures on Germination Probability"
) +
theme_minimal()
# 输出 R² 结果
print(r2_values)
pred_data_air <- data.frame(
Air_Temp..Deg.C...Smp. = seq(min(final_use_data$Air_Temp..Deg.C...Smp.), max(final_use_data$Air_Temp..Deg.C...Smp.), length.out = 100),
Soil_Temp_2in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_2in...Deg.C...Smp.),
Soil_Temp_4in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.),
Variable = "Air_Temp"
)
pred_data_soil_2in <- data.frame(
Air_Temp..Deg.C...Smp. = mean(final_use_data$Air_Temp..Deg.C...Smp.),
Soil_Temp_2in...Deg.C...Smp. = seq(min(final_use_data$Soil_Temp_2in...Deg.C...Smp.), max(final_use_data$Soil_Temp_2in...Deg.C...Smp.), length.out = 100),
Soil_Temp_4in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.),
Variable = "Soil_Temp_2in"
)
pred_data_soil_4in <- data.frame(
Air_Temp..Deg.C...Smp. = mean(final_use_data$Air_Temp..Deg.C...Smp.),
Soil_Temp_2in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_2in...Deg.C...Smp.),
Soil_Temp_4in...Deg.C...Smp. = seq(min(final_use_data$Soil_Temp_4in...Deg.C...Smp.), max(final_use_data$Soil_Temp_4in...Deg.C...Smp.), length.out = 100),
Variable = "Soil_Temp_4in"
)
# 合并所有预测数据框
pred_data <- bind_rows(pred_data_air, pred_data_soil_2in, pred_data_soil_4in)
# 预测发芽概率
pred_data$predicted_score <- predict(model_optimized_v2, newdata = pred_data, type = "response", re.form = NA)
# 绘制图形
ggplot(pred_data, aes(x = ifelse(Variable == "Air_Temp", Air_Temp..Deg.C...Smp.,
ifelse(Variable == "Soil_Temp_2in", Soil_Temp_2in...Deg.C...Smp.,
Soil_Temp_4in...Deg.C...Smp.)),
y = predicted_score, color = Variable)) +
geom_line(size = 1) +
labs(
x = "Temperature (°C)",
y = "Predicted Probability of Germination",
color = "Variable",
title = "Effect of Different Temperature Variables on Germination Probability"
) +
theme_minimal() +
scale_color_manual(values = c("Air_Temp" = "blue", "Soil_Temp_2in" = "green", "Soil_Temp_4in" = "red")) +
theme(legend.position = "top")
# 加载必要的包
library(lme4)
library(ggplot2)
library(dplyr)
# 构建优化后的模型
model_optimized_v2 <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Soil_Temp_2in...Deg.C...Smp. + Soil_Temp_4in...Deg.C...Smp. +
Air_Temp..Deg.C...Smp. * Soil_Temp_2in...Deg.C...Smp. +
(1 | Year),
data = final_use_data,
family = binomial
)
# 创建不同的预测数据框，仅变化一个自变量，其他变量保持在平均值
pred_data_air <- data.frame(
Air_Temp..Deg.C...Smp. = seq(min(final_use_data$Air_Temp..Deg.C...Smp.), max(final_use_data$Air_Temp..Deg.C...Smp.), length.out = 100),
Soil_Temp_2in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_2in...Deg.C...Smp.),
Soil_Temp_4in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.),
Variable = "Air_Temp"
)
pred_data_soil_2in <- data.frame(
Air_Temp..Deg.C...Smp. = mean(final_use_data$Air_Temp..Deg.C...Smp.),
Soil_Temp_2in...Deg.C...Smp. = seq(min(final_use_data$Soil_Temp_2in...Deg.C...Smp.), max(final_use_data$Soil_Temp_2in...Deg.C...Smp.), length.out = 100),
Soil_Temp_4in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_4in...Deg.C...Smp.),
Variable = "Soil_Temp_2in"
)
pred_data_soil_4in <- data.frame(
Air_Temp..Deg.C...Smp. = mean(final_use_data$Air_Temp..Deg.C...Smp.),
Soil_Temp_2in...Deg.C...Smp. = mean(final_use_data$Soil_Temp_2in...Deg.C...Smp.),
Soil_Temp_4in...Deg.C...Smp. = seq(min(final_use_data$Soil_Temp_4in...Deg.C...Smp.), max(final_use_data$Soil_Temp_4in...Deg.C...Smp.), length.out = 100),
Variable = "Soil_Temp_4in"
)
# 合并所有预测数据框
pred_data <- bind_rows(pred_data_air, pred_data_soil_2in, pred_data_soil_4in)
# 预测发芽概率
pred_data$predicted_score <- predict(model_optimized_v2, newdata = pred_data, type = "response", re.form = NA)
# 绘制图形
ggplot() +
# 添加原始数据点
geom_point(data = final_use_data,
aes(x = Air_Temp..Deg.C...Smp., y = Score),
alpha = 0.3, color = "grey") +
geom_point(data = final_use_data,
aes(x = Soil_Temp_2in...Deg.C...Smp., y = Score),
alpha = 0.3, color = "green") +
geom_point(data = final_use_data,
aes(x = Soil_Temp_4in...Deg.C...Smp., y = Score),
alpha = 0.3, color = "red") +
# 添加拟合曲线
geom_line(data = pred_data,
aes(x = ifelse(Variable == "Air_Temp", Air_Temp..Deg.C...Smp.,
ifelse(Variable == "Soil_Temp_2in", Soil_Temp_2in...Deg.C...Smp.,
Soil_Temp_4in...Deg.C...Smp.)),
y = predicted_score, color = Variable), size = 1) +
labs(
x = "Temperature (°C)",
y = "Predicted Probability of Germination",
color = "Variable",
title = "Effect of Different Temperature Variables on Germination Probability"
) +
theme_minimal() +
scale_color_manual(values = c("Air_Temp" = "blue", "Soil_Temp_2in" = "green", "Soil_Temp_4in" = "red")) +
theme(legend.position = "top")
# 构建包含 TreeID 和 Year 作为随机效应的模型
library(lme4)
# 构建优化后的模型，包含低相关性的交互项
model_optimized_v2 <- glmer(
Score ~ Air_Temp..Deg.C...Smp. + Soil_Temp_2in...Deg.C...Smp. + Soil_Temp_4in...Deg.C...Smp. +
Air_Temp..Deg.C...Smp. * Soil_Temp_2in...Deg.C...Smp. +
(1 | Year),
data = final_use_data,
family = binomial
)
# 输出模型摘要
summary(model_optimized_v2)
rm(list=ls())
# 设置工作目录
wdir <- "/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/F-F_Research_Data_5_Factors_2x3.csv"  # 替换为文件实际路径
setwd(wdir)
# 读取 CSV 文件
Data <- as.matrix(read.csv("FMB_CAPM_Data.csv",
header = TRUE,    # 第一行是列名
sep = ",",        # 列之间用逗号分隔
dec = ".",        # 小数点使用点号
check.names = TRUE))  # 自动调整列名
rm(list=ls())
# 设置工作目录
getwd()  # 检查当前工作目录
list.files()  # 列出当前目录中的所有文件
rm(list=ls())
# 读取 CSV 文件
Data <- as.matrix(read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/F-F_Research_Data_5_Factors_2x3.csv",
header = TRUE, sep = ",", dec = ".", check.names = TRUE))
## Bond assets ######################################################
R_bond <- Data[22:168,31:50]
library(quantmod)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
# Data collection
stock_names <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
# getting the data for the selected stocks
stock_data <- lapply(stock_names, function(x) {getSymbols(
x, periodicity='monthly', auto.assign=FALSE)})
# get adjusted prices
stock_data_adjusted <- lapply(stock_data, Ad)
# view data
head(stock_data_adjusted)
# create data object
stock_data_adjusted <- do.call(merge, stock_data_adjusted)
head(stock_data_adjusted)
# rename columns
colnames(stock_data_adjusted) <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
head(stock_data_adjusted)
# make new data frame containing the returns
# function to calculate returns for a given stock
calculate_returns <- function(stock_prices_col) {
returns_col <- stock_prices_col / lag(stock_prices_col) -1
return(returns_col)
}
stock_data_adjusted <- as.data.frame(lapply(stock_data_adjusted, calculate_returns))
# remove first row of data since it can not contain returns
stock_data_adjusted = stock_data_adjusted[-1,]
head(stock_data_adjusted)
# remove all data from before 01.09.2014
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) > "2014-8-01", ]
# remove all data after 01.09.2024
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) < "2024-10-01", ]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
# import sp500 data
sp500 <- read.csv("sp500.csv")
sp500$Date <- mdy(sp500$Date)
# make sp500 ascending in date
sp500 = sp500[order(as.Date(sp500$Date, format = "%Y/%m/%d")),]
# remove all data from before 01.01.2014
sp500 = sp500[sp500[["Date"]] > "2013-12-01", ]
# remove all data after 2022
sp500 = sp500[sp500[["Date"]] < "2023-01-01", ]
# calculate returns for sp500
sp500$returns = sp500$Price / lag(sp500$Price) - 1
sp500 = sp500[-1,]
library(quantmod)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
# Data collection
stock_names <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
# getting the data for the selected stocks
stock_data <- lapply(stock_names, function(x) {getSymbols(
x, periodicity='monthly', auto.assign=FALSE)})
# get adjusted prices
stock_data_adjusted <- lapply(stock_data, Ad)
# view data
head(stock_data_adjusted)
# create data object
stock_data_adjusted <- do.call(merge, stock_data_adjusted)
head(stock_data_adjusted)
# rename columns
colnames(stock_data_adjusted) <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
head(stock_data_adjusted)
# make new data frame containing the returns
# function to calculate returns for a given stock
calculate_returns <- function(stock_prices_col) {
returns_col <- stock_prices_col / lag(stock_prices_col) -1
return(returns_col)
}
stock_data_adjusted <- as.data.frame(lapply(stock_data_adjusted, calculate_returns))
# remove first row of data since it can not contain returns
stock_data_adjusted = stock_data_adjusted[-1,]
head(stock_data_adjusted)
# remove all data from before 01.09.2014
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) > "2014-8-31", ]
# remove all data after 01.09.2024
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) < "2024-10-01", ]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
sp500 <- read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/sp500.csv")
# import sp500 data
sp500 <- read.csv("sp500.csv")
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
sp500 <- read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/sp500.csv")
sp500$Date <- mdy(sp500$Date)
# make sp500 ascending in date
sp500 = sp500[order(as.Date(sp500$Date, format = "%Y/%m/%d")),]
# remove all data from before 01.01.2014
sp500 = sp500[sp500[["Date"]] > "2014-01-01", ]
# remove all data after 2022
sp500 = sp500[sp500[["Date"]] < "2022-12-31", ]
# calculate returns for sp500
sp500$returns = sp500$Price / lag(sp500$Price) - 1
sp500 = sp500[-1,]
library(quantmod)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
# Data collection
stock_names <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
# getting the data for the selected stocks
stock_data <- lapply(stock_names, function(x) {getSymbols(
x, periodicity='monthly', auto.assign=FALSE)})
# get adjusted prices
stock_data_adjusted <- lapply(stock_data, Ad)
# view data
head(stock_data_adjusted)
# create data object
stock_data_adjusted <- do.call(merge, stock_data_adjusted)
head(stock_data_adjusted)
# rename columns
colnames(stock_data_adjusted) <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
head(stock_data_adjusted)
# make new data frame containing the returns
# function to calculate returns for a given stock
calculate_returns <- function(stock_prices_col) {
returns_col <- stock_prices_col / lag(stock_prices_col) -1
return(returns_col)
}
stock_data_adjusted <- as.data.frame(lapply(stock_data_adjusted, calculate_returns))
# remove first row of data since it can not contain returns
stock_data_adjusted = stock_data_adjusted[-1,]
head(stock_data_adjusted)
# remove all data from before 01.09.2014
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) > "2014-8-31", ]
# remove all data after 01.09.2024
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) < "2024-10-01", ]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
sp500 <- read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/sp500.csv")
sp500$Date <- mdy(sp500$Date)
# make sp500 ascending in date
sp500 = sp500[order(as.Date(sp500$Date, format = "%Y/%m/%d")),]
# remove all data from before 01.01.2014
sp500 = sp500[sp500[["Date"]] > "2014-01-01", ]
# remove all data after 2022
sp500 = sp500[sp500[["Date"]] < "2022-12-31", ]
# calculate returns for sp500
sp500$returns = sp500$Price / lag(sp500$Price) - 1
sp500 = sp500[-1,]
write.csv(sp500, "/Users/tianyezhang/Desktop/CMEECourseWork/week5/results/sp500_cleaned.csv", row.names = FALSE)
library(quantmod)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
# Data collection
stock_names <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
# getting the data for the selected stocks
stock_data <- lapply(stock_names, function(x) {getSymbols(
x, periodicity='monthly', auto.assign=FALSE)})
# get adjusted prices
stock_data_adjusted <- lapply(stock_data, Ad)
# view data
head(stock_data_adjusted)
# create data object
stock_data_adjusted <- do.call(merge, stock_data_adjusted)
head(stock_data_adjusted)
# rename columns
colnames(stock_data_adjusted) <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
head(stock_data_adjusted)
# make new data frame containing the returns
# function to calculate returns for a given stock
calculate_returns <- function(stock_prices_col) {
returns_col <- stock_prices_col / lag(stock_prices_col) -1
return(returns_col)
}
stock_data_adjusted <- as.data.frame(lapply(stock_data_adjusted, calculate_returns))
# remove first row of data since it can not contain returns
stock_data_adjusted = stock_data_adjusted[-1,]
head(stock_data_adjusted)
# remove all data from before 01.09.2014
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) > "2014-8-31", ]
# remove all data after 01.09.2024
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) < "2024-10-01", ]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
sp500 <- read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/sp500.csv")
sp500$Date <- mdy(sp500$Date)
# make sp500 ascending in date
sp500 = sp500[order(as.Date(sp500$Date, format = "%Y/%m/%d")),]
# remove all data from before 01.01.2014
sp500 = sp500[sp500[["Date"]] > "2014-01-01", ]
# remove all data after 2022
sp500 = sp500[sp500[["Date"]] < "2022-12-31", ]
# calculate returns for sp500
sp500$returns = sp500$Price / lag(sp500$Price) - 1
sp500 = sp500[-1,]
write.csv(sp500, "/Users/tianyezhang/Desktop/CMEECourseWork/week5/sp500_cleaned.csv", row.names = FALSE)
library(quantmod)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
# Data collection
stock_names <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
# getting the data for the selected stocks
stock_data <- lapply(stock_names, function(x) {getSymbols(
x, periodicity='monthly', auto.assign=FALSE)})
# get adjusted prices
stock_data_adjusted <- lapply(stock_data, Ad)
# view data
head(stock_data_adjusted)
# create data object
stock_data_adjusted <- do.call(merge, stock_data_adjusted)
head(stock_data_adjusted)
# rename columns
colnames(stock_data_adjusted) <- c('AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOG')
head(stock_data_adjusted)
# make new data frame containing the returns
# function to calculate returns for a given stock
calculate_returns <- function(stock_prices_col) {
returns_col <- stock_prices_col / lag(stock_prices_col) -1
return(returns_col)
}
stock_data_adjusted <- as.data.frame(lapply(stock_data_adjusted, calculate_returns))
# remove first row of data since it can not contain returns
stock_data_adjusted = stock_data_adjusted[-1,]
head(stock_data_adjusted)
# remove all data from before 01.09.2014
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) > "2014-8-31", ]
# remove all data after 01.09.2024
stock_data_adjusted <- stock_data_adjusted[rownames(stock_data_adjusted) < "2024-10-01", ]
# remove first row to make data matching to sp500 data
stock_data_adjusted = stock_data_adjusted[-1,]
sp500 <- read.csv("/Users/tianyezhang/Desktop/CMEECourseWork/week5/data/sp500.csv")
sp500$Date <- mdy(sp500$Date)
# make sp500 ascending in date
sp500 = sp500[order(as.Date(sp500$Date, format = "%Y/%m/%d")),]
# remove all data from before 01.01.2014
sp500 = sp500[sp500[["Date"]] > "2014-01-01", ]
# remove all data after 2022
sp500 = sp500[sp500[["Date"]] < "2022-12-31", ]
# calculate returns for sp500
sp500$returns = sp500$Price / lag(sp500$Price) - 1
sp500 = sp500[-1,]
write.csv(sp500, "/Users/tianyezhang/Desktop/CMEECourseWork/week5/sp500_cleaned.csv", row.names = FALSE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
getwd()
setwd(/Users/tianyezhang//Users/CMEECourseWork/week4/code)
setwd("/Users/tianyezhang//Users/CMEECourseWork/week4/code")
setwd("/Users/tianyezhang/Desktop/CMEECourseWork/week4/code")
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress-copy.R", echo=TRUE)
