source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
colnames(best_fits_filtered)
colnames(results)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
print(class(gompertz_data))
print(colnames(gompertz_data))
print(head(results))
print(dim(results))  # 检查行数和列数
print(str(results))  # 查看数据结构
print(head(results)) # 查看前几行
table(results$best_model)  # 统计不同模型的数量
print(dim(raw_data))  # 你的原始数据
print(ls())  # 列出当前环境中的所有变量
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
# 检查 `results` 变量
cat("\n--- 检查 `results` 变量 ---\n")
cat("维度 (行数 × 列数):", dim(results), "\n")
print(str(results))
print(head(results))
# 检查 `best_fits_filtered`
cat("\n--- 检查 `best_fits_filtered` ---\n")
cat("维度 (行数 × 列数):", dim(best_fits_filtered), "\n")
print(str(best_fits_filtered))
print(head(best_fits_filtered))
# 检查 `Gompertz_AIC` 和 `Logistic_AIC`
cat("\n--- 检查 `Gompertz_AIC` 和 `Logistic_AIC` ---\n")
if ("Gompertz_AIC" %in% colnames(best_fits_filtered) & "Logistic_AIC" %in% colnames(best_fits_filtered)) {
print(summary(best_fits_filtered$Gompertz_AIC))
print(summary(best_fits_filtered$Logistic_AIC))
} else {
cat("⚠️ `best_fits_filtered` 没有 `Gompertz_AIC` 或 `Logistic_AIC` 列！\n")
}
# 重新生成 `best_model`
cat("\n--- 重新生成 `best_model` 并检查 ---\n")
if ("Gompertz_AIC" %in% colnames(best_fits_filtered) & "Logistic_AIC" %in% colnames(best_fits_filtered)) {
results <- best_fits_filtered %>%
mutate(best_model = case_when(
Gompertz_AIC < Logistic_AIC ~ "Gompertz",
TRUE ~ "Logistic"
))
cat("✅ `best_model` 变量已重新生成。\n")
} else {
cat("❌ 无法生成 `best_model`，缺少 `Gompertz_AIC` 或 `Logistic_AIC`。\n")
}
# 检查 `best_model` 变量
cat("\n--- 统计 `best_model` 变量的分布 ---\n")
if ("best_model" %in% colnames(results)) {
print(table(results$best_model, useNA = "ifany"))
} else {
cat("⚠️ `results` 中没有 `best_model` 变量！\n")
}
# 检查 `gompertz_data`
cat("\n--- 过滤 `Gompertz` 相关数据 ---\n")
if ("best_model" %in% colnames(results)) {
gompertz_data <- results %>% filter(best_model == "Gompertz")
cat("维度 (行数 × 列数):", dim(gompertz_data), "\n")
print(head(gompertz_data))
} else {
cat("⚠️ 无法创建 `gompertz_data`，因为 `best_model` 变量不存在。\n")
}
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
print(dim(results))  # 查看行数和列数
print(head(results)) # 查看前几行
print(dim(gompertz_data))  # 查看行数
print(head(gompertz_data)) # 检查数据是否正确
table(results$best_model, useNA = "ifany")
summary(results$Gompertz_AIC)
summary(results$Logistic_AIC)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
print(dim(gompertz_data))   # 应该有多行数据
print(head(gompertz_data))  # 查看前几行
# 运行贝叶斯回归模型
bayes_model <- stan_glm(
t_lag ~ r_max + K,
data = gompertz_data,
family = gaussian(),
prior = normal(0, 1),
prior_intercept = normal(0, 1),
chains = 2,
iter = 2000,
seed = 1234
)
# 输出模型摘要
summary(bayes_model)
# 提取后验分布
posterior_samples <- as.matrix(bayes_model)
# 重新加载 MCMC 结果
bayes_model <- readRDS("../results/bayes_model.rds")
# 绘制后验分布
posterior_rmax <- as.matrix(bayes_model)[, "r_max"]
posterior_K <- as.matrix(bayes_model)[, "K"]
# 重新生成图
png("../results/Final_Posterior_r_max.png", width = 1000, height = 800)
mcmc_areas(posterior_rmax) + ggtitle("Final Posterior Distribution of r_max")
dev.off()
png("../results/Final_Posterior_K.png", width = 1000, height = 800)
mcmc_areas(posterior_K) + ggtitle("Final Posterior Distribution of K")
dev.off()
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
file.exists("../results/bayes_model.rds")
bayes_model <- readRDS("../results/bayes_model.rds")  # ✅ 这样才对
summary(bayes_model)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/第二版的贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/GOMER贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/GOMER贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/GOMER贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
source("~/Desktop/mini/code/Logistic贝叶斯.R", echo=TRUE)
print(bf)
print(bf)
# 提取参数样本
posterior_samples_logistic <- extract(fit_logistic)
posterior_samples_gompertz <- extract(fit_gompertz)
# 计算 Posterior Predictive Check (PPC)
y_rep_logistic <- matrix(nrow = length(posterior_samples_logistic$r_max), ncol = length(data$Time))
y_rep_gompertz <- matrix(nrow = length(posterior_samples_gompertz$r_max), ncol = length(data$Time))
for (i in 1:nrow(y_rep_logistic)) {
# 计算 Logistic 预测值
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] * (data$Time - posterior_samples_logistic$t_lag[i])))
# 计算 Gompertz 预测值
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(
-exp(posterior_samples_gompertz$r_max[i] * exp(1) * (posterior_samples_gompertz$t_lag[i] - data$Time) /
posterior_samples_gompertz$K[i] + 1))
}
print(paste("Bayes Factor (Gompertz vs Logistic):", bf))
str(posterior_samples_logistic)
print(bf)
# 获取样本数
n_samples <- nrow(posterior_samples_logistic)
n_time <- length(data$Time)
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 检查 n_samples 是否有效
print(n_samples)
print(is.numeric(n_samples))
# 确保 posterior_samples_logistic 是个有效的列表
str(posterior_samples_logistic)
print(bf)
# 获取样本数
n_samples <- length(posterior_samples_logistic$r_max)  # 取 posterior 的样本数
n_time <- length(data$Time)  # 取数据时间点数
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 确保创建成功
print(dim(y_rep_logistic))
print(dim(y_rep_gompertz))
# 遍历所有样本，计算预测值
for (i in 1:n_samples) {
# 计算 Logistic 预测值 (⚠️去掉 t_lag)
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] *
(data$Time - posterior_samples_logistic$N_0[i])))
# 计算 Gompertz 预测值
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(
-exp(posterior_samples_gompertz$r_max[i] * exp(1) *
(posterior_samples_gompertz$t_lag[i] - data$Time) /
posterior_samples_gompertz$K[i] + 1))
}
# **输出结果**
print(waic_logistic)
print(waic_gompertz)
print(paste("Bayes Factor (Gompertz vs Logistic):", bf))
# **保存 Logistic 模型**
saveRDS(fit_logistic, "../results/bayes_model_logistic.rds")
library(ggplot2)
library(bayesplot)
# 获取样本数量和时间点数量
n_samples <- length(posterior_samples_logistic$r_max)
n_time <- length(data$Time)
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 计算 Logistic 预测值
for (i in 1:n_samples) {
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] * (data$Time - data$Time[1])))
}
# 计算 Gompertz 预测值
for (i in 1:n_samples) {
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(
-exp(posterior_samples_gompertz$r_max[i] * exp(1) * (posterior_samples_gompertz$t_lag[i] - data$Time) /
posterior_samples_gompertz$K[i] + 1))
}
# **绘制 Posterior Predictive Check (PPC)**
png("../results/PPC_Logistic.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_logistic[1:100, ]) + ggtitle("PPC for Logistic Model")
dev.off()
png("../results/PPC_Gompertz.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_gompertz[1:100, ]) + ggtitle("PPC for Gompertz Model")
dev.off()
# 先检查 y_rep_logistic 是否为空
print(dim(y_rep_logistic)) # 应该是 (8000, 时间点数)
print(summary(y_rep_logistic)) # 统计 y_rep_logistic 取值范围
# 再检查 y_rep_gompertz 是否为空
print(dim(y_rep_gompertz)) # 应该是 (8000, 时间点数)
print(summary(y_rep_gompertz)) # 统计 y_rep_gompert
hist(y_rep_logistic, breaks = 50, main = "Histogram of Logistic Predictions")
hist(y_rep_gompertz, breaks = 50, main = "Histogram of Gompertz Predictions")
# **输出结果**
print(waic_logistic)
print(waic_gompertz)
print(summary(y_rep_logistic))
print(summary(y_rep_gompertz))
library(ggplot2)
library(bayesplot)
# 获取样本数量和时间点数量
n_samples <- length(posterior_samples_logistic$r_max)
n_time <- length(data$Time)
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 计算 Logistic 预测值
for (i in 1:n_samples) {
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] *
(data$Time - mean(data$Time))))  # 这里改成均值中心化
}
# 计算 Gompertz 预测值
for (i in 1:n_samples) {
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(
-exp(posterior_samples_gompertz$r_max[i] * exp(1) *
(posterior_samples_gompertz$t_lag[i] - mean(data$Time)) /
posterior_samples_gompertz$K[i] + 1))
}
hist(y_rep_logistic[1, ], breaks = 50, main = "Logistic Predictions Distribution")
hist(y_rep_gompertz[1, ], breaks = 50, main = "Gompertz Predictions Distribution")
# **绘制 Posterior Predictive Check (PPC)**
png("../results/PPC_Logistic_Fixed.png", width = 1000, height = 800)
ppc_dens_overlay(y = data$PopBio, yrep = y_rep_logistic[1:100, ]) + ggtitle("Fixed PPC for Logistic Model")
dev.off()
png("../results/PPC_Gompertz_Fixed.png", width = 1000, height = 800)
ppc_dens_overlay(y = data$PopBio, yrep = y_rep_gompertz[1:100, ]) + ggtitle("Fixed PPC for Gompertz Model")
dev.off()
print(dim(y_rep_gompertz))
print(summary(y_rep_gompertz))
print(y_rep_gompertz[1:10, 1:10])  # 查看前 10 个样本的前 10 个时间点的预测值
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 先检查数据格式是否符合要求
print(dim(y_rep_logistic))
print(dim(y_rep_gompertz))
# 取100个随机样本
y_rep_logistic_sample <- y_rep_logistic[sample(1:nrow(y_rep_logistic), 100), ]
y_rep_gompertz_sample <- y_rep_gompertz[sample(1:nrow(y_rep_gompertz), 100), ]
# 确保数据正确
print(dim(y_rep_logistic_sample))
print(dim(y_rep_gompertz_sample))
# **绘制 PPC**
png("../results/PPC_Logistic.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_logistic_sample) +
ggtitle("PPC for Logistic Model")
print(class(y_rep_logistic_sample))
print(str(y_rep_logistic_sample))
library(ggplot2)
library(bayesplot)
# 获取样本数量和时间点数量
n_samples <- length(posterior_samples_logistic$r_max)
n_time <- length(data$Time)
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# ✅ **计算 Logistic 预测值**
for (i in 1:n_samples) {
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] * (data$Time - data$Time[1])))
}
# ✅ **计算 Gompertz 预测值**
for (i in 1:n_samples) {
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(
-exp(posterior_samples_gompertz$r_max[i] * exp(1) *
(posterior_samples_gompertz$t_lag[i] - data$Time) /
posterior_samples_gompertz$K[i] + 1))
}
# **检查数据格式**
print(dim(y_rep_logistic))
print(dim(y_rep_gompertz))
# **取100个随机样本**
y_rep_logistic_sample <- y_rep_logistic[sample(1:nrow(y_rep_logistic), 100), ]
y_rep_gompertz_sample <- y_rep_gompertz[sample(1:nrow(y_rep_gompertz), 100), ]
# **确保数据正确**
print(dim(y_rep_logistic_sample))
print(dim(y_rep_gompertz_sample))
# **绘制 PPC**
png("../results/PPC_Logistic.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_logistic_sample) +
ggtitle("PPC for Logistic Model")
dev.off()
png("../results/PPC_Gompertz.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_gompertz_sample) +
ggtitle("PPC for Gompertz Model")
dev.off()
sum(is.na(y_rep_gompertz_sample))  # 计算 NA 的个数
sum(is.na(posterior_samples_gompertz$t_lag))
sum(posterior_samples_gompertz$K == 0)
sum(is.na(y_rep_gompertz))
summary(posterior_samples_gompertz$r_max)
summary(posterior_samples_gompertz$t_lag)
summary(posterior_samples_gompertz$K)
test_value <- posterior_samples_gompertz$r_max[1] * exp(1) *
(posterior_samples_gompertz$t_lag[1] - data$Time) /
posterior_samples_gompertz$K[1] + 1
print(test_value)
print(exp(-exp(test_value)))
# 加载必要的库
library(ggplot2)
library(bayesplot)
# 获取样本数量和时间点数量
n_samples <- length(posterior_samples_logistic$r_max)
n_time <- length(data$Time)
# 初始化预测值矩阵
y_rep_logistic <- matrix(NA, nrow = n_samples, ncol = n_time)
y_rep_gompertz <- matrix(NA, nrow = n_samples, ncol = n_time)
# 定义一个安全计算 exp() 的函数，避免 Inf
safe_exp <- function(x) {
ifelse(x > 700, Inf, exp(x))  # 避免溢出
}
# 计算 Logistic 预测值
for (i in 1:n_samples) {
y_rep_logistic[i, ] <- posterior_samples_logistic$K[i] /
(1 + exp(-posterior_samples_logistic$r_max[i] * (data$Time - data$Time[1])))
}
# 计算 Gompertz 预测值（修正 NA 生成问题）
for (i in 1:n_samples) {
t_lag_adj <- ifelse(posterior_samples_gompertz$t_lag[i] > max(data$Time),
max(data$Time),
posterior_samples_gompertz$t_lag[i])
exp_term <- safe_exp(posterior_samples_gompertz$r_max[i] * exp(1) *
(t_lag_adj - data$Time) / posterior_samples_gompertz$K[i] + 1)
y_rep_gompertz[i, ] <- posterior_samples_gompertz$K[i] * exp(-exp_term)
}
# 替换 NA 值，避免绘图错误
y_rep_gompertz[is.na(y_rep_gompertz)] <- 0
y_rep_logistic[is.na(y_rep_logistic)] <- 0
# **检查是否有 NA**
print(sum(is.na(y_rep_gompertz)))  # 预期应该是 0
print(sum(is.na(y_rep_logistic)))  # 预期应该是 0
# **取 100 个随机样本**
y_rep_logistic_sample <- y_rep_logistic[sample(1:nrow(y_rep_logistic), 100), ]
y_rep_gompertz_sample <- y_rep_gompertz[sample(1:nrow(y_rep_gompertz), 100), ]
# 确保数据正确
print(dim(y_rep_logistic_sample))
print(dim(y_rep_gompertz_sample))
# **绘制 Posterior Predictive Check (PPC)**
png("../results/PPC_Logistic.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_logistic_sample) +
ggtitle("PPC for Logistic Model")
dev.off()
png("../results/PPC_Gompertz.png", width = 1000, height = 800)
ppc_dens_overlay(data$PopBio, y_rep_gompertz_sample) +
ggtitle("PPC for Gompertz Model")
dev.off()
# **输出结果**
print(waic_logistic)
print(waic_gompertz)
print(paste("Bayes Factor (Gompertz vs Logistic):", bf))
loo_logistic <- loo(log_lik_logistic)
loo_gompertz <- loo(log_lik_gompertz)
print(loo_logistic)
print(loo_gompertz)
source("~/Desktop/mini/code/lag和温度的关系.R", echo=TRUE)
source("~/Desktop/mini/code/GOEM拟合提取滞后期.R", echo=TRUE)
print(count(id))
print(count(data$Unique_ID))
print(count(Unique_ID))
source("~/Desktop/mini/code/miniprojectdatacleaning.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
print(model_count)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
print(unique(subset$Time))
quantiles <- unique(quantile(subset$Time, probs = seq(0, 1, length.out = n_segments + 1)))
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/miniprojectdatacleaning.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print(head(fit_data))  # 确保拟合数据有 Time 和 PopBio 两列
summary(fit)
print(best_id)
source("~/.active-rstudio-document", echo=TRUE)
ggplot() +
# 绘制实验数据散点图
geom_point(data = best_data, aes(x = Time, y = PopBio), color = "blue", size = 2) +
# 绘制 Gompertz 拟合曲线
geom_line(data = fit_data, aes(x = Time, y = PopBio), color = "red", linewidth = 1) +
labs(title = paste("Best Gompertz Fit for ID:", best_id),
x = "Time", y = "Population Biomass") +
theme_minimal()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rlang::last_trace()
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/miniprojectdatacleaning.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/分时间段.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
if (nrow(subset) == 0 || all(is.na(subset$LogPopBio))) {
warning(paste("Skipping Unique_ID:", unique_id, "due to empty LogPopBio data"))
return(model_results)
}
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/Desktop/mini/code/model.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print(model_count)
print(best_models)
print(nrow(results))  # 确保 results 不是空的
print(head(results))  # 查看前几行
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
str(subset_df)  # 查看数据结构
str(subset_df)  # 查看数据结构
class(subset_df)  # 确保是 data.frame
# 遍历所有 ID
eval_results <- do.call(rbind, lapply(unique(data$Unique_ID), function(id) {
subset_df <- subset(data, Unique_ID == id)
subset_df <- as.data.frame(subset_df)  # 强制转换为 data.frame
evaluate_models(id, subset_df)
str(subset_df)  # 查看数据结构
class(subset_df)  # 确保是 data.frame
}))
str(subset_df)  # 查看数据结构
class(subset_df)  # 确保是 data.frame
