data <- read.csv(input_file)
# 确保数据包含所需列，并替换列名中的空格
colnames(data) <- gsub("\\s+", ".", colnames(data))  # 替换列名空格为点
# 检查所需列是否存在
required_cols <- c("Prey.mass", "Predator.mass", "Predator.lifestage", "Type.of.feeding.interaction")
if (!all(required_cols %in% colnames(data))) {
stop("数据中缺少必要的列，请确保数据包含以下列: Prey.mass, Predator.mass, Predator.lifestage, Type.of.feeding.interaction")
}
# 初始化存储回归结果的数据框
regression_results <- data.frame()
# 获取所有 Feeding Type 和 Predator lifestage 的唯一组合
unique_combinations <- unique(data[, c("Type.of.feeding.interaction", "Predator.lifestage")])
# 对每个 Feeding Type 和 Predator lifestage 的组合进行循环
for (i in 1:nrow(unique_combinations)) {
subset_data <- data %>%
filter(Type.of.feeding.interaction == unique_combinations$Type.of.feeding.interaction[i],
Predator.lifestage == unique_combinations$Predator.lifestage[i])
# 如果子集数据的行数大于 1，则进行回归
if (nrow(subset_data) > 1) {
model <- lm(log10(Predator.mass) ~ log10(Prey.mass), data = subset_data)
# 提取回归模型的详细信息
slope <- coef(model)[2]
intercept <- coef(model)[1]
r_squared <- summary(model)$r.squared
# 检查 fstatistic 是否存在
if (!is.null(summary(model)$fstatistic)) {
f_stat <- summary(model)$fstatistic[1]
df1 <- summary(model)$fstatistic[2]
df2 <- summary(model)$fstatistic[3]
p_value <- pf(f_stat, df1 = df1, df2 = df2, lower.tail = FALSE)
} else {
f_stat <- NA
p_value <- NA
}
# 将结果追加到回归结果数据框中
regression_results <- rbind(regression_results, data.frame(
FeedingType = unique_combinations$Type.of.feeding.interaction[i],
Predator.lifestage = unique_combinations$Predator.lifestage[i],
Slope = slope,
Intercept = intercept,
R_squared = r_squared,
F_statistic = f_stat,
P_value = p_value
))
}
}
# 保存回归结果为 CSV 文件
write.csv(regression_results, output_csv, row.names = FALSE)
# 绘制图表
plot <- ggplot(data, aes(x = log10(Prey.mass), y = log10(Predator.mass), color = Predator.lifestage)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~ Type.of.feeding.interaction, scales = "free") +
labs(x = "Prey Mass (log10 grams)", y = "Predator Mass (log10 grams)", color = "Predator Lifestage") +
theme_minimal()
# 保存图表到 PDF 文件
pdf(output_plot)
print(plot)
dev.off()
# 打印完成信息
cat("回归分析完成，结果已保存为:\n", output_csv, "\n图表已保存为:\n", output_plot, "\n")
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
# 加载必要的库
library(ggplot2)
library(dplyr)
library(scales)
# 设置输入数据文件路径
input_file <- "../data/EcolArchives-E089-51-D1.csv"  # 输入文件路径
output_plot <- "../results/predacious_piscivorous_plot.pdf"  # 输出图文件路径
# 加载数据
data <- read.csv(input_file)
# 替换列名中的空格为点，确保列名格式正确
colnames(data) <- gsub("\\s+", ".", colnames(data))
# 筛选数据
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous" &
Predator.lifestage == "adult")
head(filtered_data)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
# PP_Regress.R
library(ggplot2)
library(dplyr)
# 设置工作目录路径
data_path <- "../data/EcolArchives-E089-51-D1.csv" # 确保这里的路径指向数据文件
output_plot_path <- "../results/PP_Regress.pdf"
output_csv_path <- "../results/PP_Regress_Results.csv"
# 1. 导入数据
data <- read.csv(data_path)
# 2. 筛选数据: Type.of.feeding.interaction 为 predacious/piscivorous 且 Predator.lifestage 为 adult
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous" &
Predator.lifestage == "adult")
# 3. 数据分组回归分析
regression_results <- filtered_data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
summarise(
slope = coef(lm(Predator.mass ~ Prey.mass))[2],
intercept = coef(lm(Predator.mass ~ Prey.mass))[1],
r_squared = summary(lm(Predator.mass ~ Prey.mass))$r.squared,
f_statistic = summary(lm(Predator.mass ~ Prey.mass))$fstatistic[1],
p_value = summary(lm(Predator.mass ~ Prey.mass))$coefficients[2, 4]
)
# 保存回归结果到 CSV
write.csv(regression_results, output_csv_path, row.names = FALSE)
# 4. 绘图
pdf(output_plot_path, width = 8, height = 6)
ggplot(filtered_data, aes(x = Prey.mass, y = Predator.mass)) +
geom_point(color = "red", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(
x = "Prey Mass in grams",
y = "Predator Mass in grams",
title = "Predator-Prey Regression",
subtitle = "Feeding Type: Predacious/Piscivorous, Life Stage: Adult"
) +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
facet_wrap(~ Type.of.feeding.interaction)
dev.off()
# 提示信息
message("Script executed successfully! PDF plot and regression results have been saved.")
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
# 加载数据
data_path <- "../data/EcolArchives-E089-51-D1.csv" # 请根据你的实际路径替换
output_path <- "../results/filtered_data.csv"      # 结果输出路径
# 读取CSV文件
data <- read.csv(data_path)
str(data)  # 检查原始数据类型
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
head(filtered_data)
# 设置路径
data_path <- "../data/EcolArchives-E089-51-D1.csv" # 数据路径
output_path <- "../results/filtered_data.csv"      # 筛选后的数据保存路径
# 读取数据
data <- read.csv(data_path)
# 筛选数据：Type.of.feeding.interaction 为 "predacious/piscivorous" 且 Predator.lifestage 为 "adult"
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous" &
Predator.lifestage == "adult")
# 强制将相关列转换为科学计数法格式
filtered_data$Predator.mass <- format(filtered_data$Predator.mass, scientific = TRUE)
filtered_data$Prey.mass <- format(filtered_data$Prey.mass, scientific = TRUE)
pdf(output_plot_path, width = 8, height = 6)  # 打开PDF设备
ggplot(filtered_data, aes(x = as.numeric(Prey.mass), y = as.numeric(Predator.mass))) +
geom_point(shape = 4, color = "red", size = 2) +  # 绘制红色十字形点
geom_smooth(method = "lm", se = TRUE, color = "red") +  # 添加线性拟合和置信区间
scale_x_continuous(name = "Prey Mass in grams") +  # 横坐标标题
scale_y_continuous(name = "Predator Mass in grams") +  # 纵坐标标题
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # 居中的标题
axis.text = element_text(size = 10),  # 坐标轴刻度大小
panel.grid.minor = element_blank(),  # 去掉次网格
strip.text = element_text(size = 12, face = "bold")  # 分面标题
) +
labs(
title = "Predator-Prey Linear Fit",  # 图表标题
subtitle = "Feeding Type: Predacious/Piscivorous, Life Stage: Adult"  # 副标题
)
dev.off()  # 关闭PDF设备
# 提示信息
cat("线性拟合图已保存到:", output_plot_path, "\n")
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
summary(filtered_data$Prey.mass)
summary(filtered_data$Predator.mass)
# 设置路径
data_path <- "../data/EcolArchives-E089-51-D1.csv" # 数据路径
output_path <- "../results/filtered_data.csv"      # 筛选后的数据保存路径
# 读取数据
data <- read.csv(data_path)
# 筛选数据：Type.of.feeding.interaction 为 "predacious/piscivorous" 且 Predator.lifestage 为 "adult"
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous" &
Predator.lifestage == "adult")
# 强制将相关列转换为科学计数法格式
filtered_data$Predator.mass <- format(filtered_data$Predator.mass, scientific = TRUE)
filtered_data$Prey.mass <- format(filtered_data$Prey.mass, scientific = TRUE)
summary(filtered_data$Prey.mass)
summary(filtered_data$Predator.mass)
ggplot(filtered_data, aes(x = as.numeric(Prey.mass), y = as.numeric(Predator.mass))) +
geom_point(shape = 4, color = "red", size = 2) +  # 绘制红色十字形点
geom_smooth(method = "lm", se = TRUE, color = "red") +  # 添加线性拟合和置信区间
scale_x_log10(
limits = c(1e-07, 1e+01),  # 强制横轴范围
breaks = c(1e-07, 1e-03, 1e+01),  # 设置横轴刻度
labels = c("1e-07", "1e-03", "1e+01")  # 横轴标签
) +
scale_y_log10(
limits = c(1e-06, 1e+06),  # 强制纵轴范围
breaks = c(1e-06, 1e-02, 1e+02, 1e+06),  # 设置纵轴刻度
labels = c("1e-06", "1e-02", "1e+02", "1e+06")  # 纵轴标签
)
# 对数变换数据
filtered_data$log_Prey.mass <- log10(filtered_data$Prey.mass)
filtered_data$log_Predator.mass <- log10(filtered_data$Predator.mass)
# 使用对数变换的数据绘图
ggplot(filtered_data, aes(x = log_Prey.mass, y = log_Predator.mass)) +
geom_point(shape = 4, color = "red", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "red")
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
head(filtered_data$log_Prey.mass)
source("~/Desktop/lyb.R", echo=TRUE)
# 设置路径
data_path <- "../data/EcolArchives-E089-51-D1.csv" # 数据路径
output_path <- "../results/filtered_data.csv"      # 筛选后的数据保存路径
# 读取数据
data <- read.csv(data_path)
# 筛选数据：Type.of.feeding.interaction 为 "predacious/piscivorous" 且 Predator.lifestage 为 "adult"
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous" &
Predator.lifestage == "adult")
filtered_data
# 读取数据
data <- read.csv(data_path)
# 筛选数据：Type.of.feeding.interaction 为 "predacious/piscivorous" 且 Predator.lifestage 为 "adult"
filtered_data <- subset(data,
Type.of.feeding.interaction == "predacious/piscivorous")
filtered_data
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
# Clear the workspace
rm(list = ls())
# Import necessary libraries
library(ggplot2)
library(dplyr)
# Load the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Convert masses from mg to g
MyDF <- MyDF %>%
mutate(Prey.mass = ifelse(Prey.mass.unit == "mg", Prey.mass / 1000, Prey.mass),
Prey.mass.unit = "g")
# Create PDF to save the plot
pdf("../results/PP_Regress.pdf", width = 9.5, height = 12)
# Plot predator and prey mass by feeding type and predator lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = "lm", formula = y ~ x, fullrange = TRUE, na.rm = TRUE) +
scale_x_log10() +
scale_y_log10() +
xlab("Prey mass in grams") +
ylab("Predator mass in grams") +
facet_grid(Type.of.feeding.interaction ~ .) +
theme_bw() +
theme(legend.position = "bottom",
panel.border = element_rect(colour = "grey", fill = NA),
legend.title = element_text(size = 9, face = "bold")) +
guides(colour = guide_legend(nrow = 1))
print(p)
# Close the PDF device
graphics.off()
当然可以，在清除重复数据时，记录并打印清除的行非常简单。以下是修改后的代码，可以在清除重复数据时打印出被清除的具体行信息。
# 检查并清除重复数据
MyDF <- MyDF %>%
distinct()  # 删除完全重复的行
# 如果需要基于特定列检查重复（例如 Record.number）
duplicates <- MyDF %>%
group_by(Record.number) %>%
filter(n() > 1)  # 筛选重复的行
if (nrow(duplicates) > 0) {
cat("以下记录是重复的，将被移除：\n")
print(duplicates)  # 打印重复的行
# 删除重复行，只保留第一个出现的记录
MyDF <- MyDF %>%
distinct(Record.number, .keep_all = TRUE)
} else {
cat("没有发现重复数据。\n")
}
# Calculate regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# Remove subset that contains only 2 examples, both with the same species of prey and predator
filter(Record.number != "30914" & Record.number != "30929") %>%
# Subset only the data needed and group by feeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# Perform linear model calculations and store specific values as columns in the dataframe
do(mod = lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(
Regression.slope = summary(mod)$coefficients[2, 1],
Regression.intercept = summary(mod)$coefficients[1, 1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coefficients[2, 4]
) %>%
dplyr::select(-mod)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/PP_Regress.R", echo=TRUE)
source("~/Desktop/lyb.R", echo=TRUE)
source("~/Desktop/lyb-copy.R", echo=TRUE)
source("~/Desktop/lyb-copy.R", echo=TRUE)
source("~/Desktop/lyb-copy.R", echo=TRUE)
source("~/Desktop/lyb-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/Florida.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/Florida.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/Florida.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/Florida.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/Florida.R", echo=TRUE)
getwd()
getwd()
write.csv(ats, "../data/KeyWestAnnualMeanTemperature.csv", row.names = FALSE)
rm(list=ls())
# 检查是否在正确的工作目录
getwd()  # 检查当前工作目录
# 写入文件到 data 文件夹
write.csv(ats, "../data/KeyWestAnnualMeanTemperature.csv", row.names = FALSE)
load("../data/KeyWestAnnualMeanTemperature.RData")
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
mean_temp <- mean(data$Temp)
sd_temp <- sd(data$Temp)
num_years <- length(unique(data$Year))
# 打印结果
cat("Mean Temperature: ", mean_temp, "°C\n")
cat("Standard Deviation: ", sd_temp, "°C\n")
cat("Number of Years: ", num_years, "\n")
rm(list=ls())
#load("../data/KeyWestAnnualMeanTemperature.RData")
data <- read.csv("KeyWestAnnualMeanTemperature.csv")
mean_temp <- mean(data$Temp)
sd_temp <- sd(data$Temp)
num_years <- length(unique(data$Year))
# 打印结果
cat("Mean Temperature: ", mean_temp, "°C\n")
cat("Standard Deviation: ", sd_temp, "°C\n")
cat("Number of Years: ", num_years, "\n")
#load("../data/KeyWestAnnualMeanTemperature.RData")
data <- read.csv("KeyWestAnnualMeanTemperature.csv")
head()
#load("../data/KeyWestAnnualMeanTemperature.RData")
data <- read.csv("KeyWestAnnualMeanTemperature.csv")
head(data())
mean_temp <- mean(data$Temp)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
mean_temp <- mean(data$ats)
# 读取数据
data <- read.csv("../data/KeyWestAnnualMeanTemperature.csv")
# 查看数据结构
str(data)
# 查看前几行
head(data)
# 查看列名
names(data)
# 总结温度的信息
temp_summary <- summary(data$Temp)
print("温度描述统计：")
print(temp_summary)
# 计算更多统计指标（如标准差和方差）
temp_sd <- sd(data$Temp)  # 标准差
temp_var <- var(data$Temp)  # 方差
print(paste("温度标准差:", temp_sd))
print(paste("温度方差:", temp_var))
num_years <- length(unique(temp_data$Year))
print(paste("温度方差:", temp_var))
num_years <- length(unique(data$Year))
cat("Number of Years: ", num_years, "\n")
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
mean_temp <- mean(data$ats)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
actual_corr <- cor(ats$Year, ats$Temp)
print(actual_corr)
set.seed(123)  # 设置随机种子以便结果可复现
n_permutations <- 10000 # 设置置换次数
random_corrs <- numeric(n_permutations)  # 初始化存储随机相关系数的向量
for (i in 1:n_permutations) {
shuffled_temp <- sample(ats$Temp)  # 随机打乱温度
random_corrs[i] <- cor(ats$Year, shuffled_temp)  # 计算相关系数
}
# 查看随机相关系数分布
hist(random_corrs, main = "Random Correlation Coefficients", xlab = "Correlation")
p_value <- mean(abs(random_corrs) >= abs(actual_corr))  # 双尾检验
print(abs(random_corrs) >= abs(actual_corr))
print(paste("P-value:", p_value))
pdf("../results/random_correlation_histogram.pdf", width = 8, height = 6)
# 绘制随机相关系数的直方图
hist(random_corrs,
main = "Random Correlation Coefficients",
xlab = "Correlation",
xlim = range(c(random_corrs, actual_corr, -actual_corr)) + c(-0.1, 0.1),  # 扩展范围，留出一定余地
col = "lightblue",
breaks = 30)  # 设置分段数量
# 添加实际相关系数的垂直线
abline(v = actual_corr, col = "red", lwd = 2, lty = 2)  # 垂直线，红色，虚线
abline(v = -actual_corr, col = "red", lwd = 2, lty = 2)  # 对称线（双尾检验）
# 添加图例，调整位置避免遮挡
legend("topright",  # 将图例放置在右上角，避免与图形重叠
legend = c("Actual Correlation"),
col = c("red"),
lty = c(2),
lwd = c(2),
box.lty = 0)  # 去掉图例边框
dev.off()
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1.R", echo=TRUE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load weather data
load("../data/KeyWestAnnualMeanTemperature.RData")
# Plot temperatures over time on line graph
pdf("../results/Temperature-Group.pdf")
plot(ats$Year,
ats$Temp,
xlab = "Year",
ylab = "Temperature (°C)",
type = "l",
main = "Annual Mean Temperature in Key West, Florida (1901-2000)")
dev.off()
# Create two vectors of temperatures, one with the first row deleted to align for comparison
Temp_t0 <- ats$Temp[2:100]
Temp_t1 <- ats$Temp[1:99]
# Calculate the correlation between successive years
CorCoeff <- cor(Temp_t0, Temp_t1)
cat("Correlation between successive years is", CorCoeff, "\n")
# Create a matrix of 10,000 random permutations of temperature column
Temps1 <- replicate(10, sample(ats$Temp, replace = FALSE))
# For each permutation, realign as before and calculate correlation
RdmCors <- apply(Temps1, 2, function(x) cor(x[2:100], x[1:99]))
# Clear workspace
rm(list = ls())
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load weather data
load("../data/KeyWestAnnualMeanTemperature.RData")
# Plot temperatures over time on line graph
pdf("../results/Temperature-Group.pdf")
plot(ats$Year,
ats$Temp,
xlab = "Year",
ylab = "Temperature (°C)",
type = "l",
main = "Annual Mean Temperature in Key West, Florida (1901-2000)")
dev.off()
# Create two vectors of temperatures, one with the first row deleted to align for comparison
Temp_t0 <- ats$Temp[2:100]
Temp_t1 <- ats$Temp[1:99]
# Calculate the correlation between successive years
CorCoeff <- cor(Temp_t0, Temp_t1)
cat("Correlation between successive years is", CorCoeff, "\n")
# Create a matrix of 10,000 random permutations of temperature column
Temps1 <- replicate(10, sample(ats$Temp, replace = FALSE))
# For each permutation, realign as before and calculate correlation
RdmCors <- apply(Temps1, 2, function(x) cor(x[2:100], x[1:99]))
print(RdmCors)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week4/code/TAutoCorr 1-copy.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week3/code/R_conditionals.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week3/code/Girko.R", echo=TRUE)
source("~/Desktop/CMEECourseWork/week3/code/Girko.R", echo=TRUE)
# Load necessary library
getwd()
library(ggplot2)
source("~/Desktop/CMEECourseWork/week3/code/Girko.R", echo=TRUE)
getwd()
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
source("~/Desktop/CMEECourseWork/week3/code/basic_io.R", echo=TRUE)
